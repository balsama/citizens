<?php
/**
 * @file
 * An Imagefield formatter to display image through CSS path.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * @see imagefield_css_field_formatter_view()
 */
function imagefield_css_field_formatter_info() {
  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
  }
  $breakpoints['default'] = array();
  $settings = array();
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    $settings[$breakpoint]['settings'] = array(
      $breakpoint . '-sameas' => '',
      $breakpoint . '-selector' => 'body',
      $breakpoint . '-image_style' => '',
      $breakpoint . '-color' => '',
      $breakpoint . '-repeat' => 'no-repeat',
      $breakpoint . '-attachment' => 'fixed',
      $breakpoint . '-horizontal_position' => 'center',
      $breakpoint . '-vertical_position' => 'top',
      $breakpoint . '-important' => TRUE,
    );
  }
  // This formatter changes the background image of the content region.
  return array(
    'imagefield_css_declaration' => array(
      'label' => t("CSS Declaration"),
      'field types' => array('image'),
      'settings' => $settings,
    ),
  );
}


/**
 * Implements hook_theme().
 */
function imagefield_css_theme() {
  return array(
    'imagefield_css_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'settings' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function imagefield_css_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $element = array();
  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
  }
  $breakpoints['default'] = array();
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    $element[$breakpoint] = imagefield_css_field_formatter_settings_itemform($display);
    $element[$breakpoint] = array(
      '#type' => 'fieldset',
      '#title' => $breakpoint,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $element[$breakpoint]['settings'] = imagefield_css_field_formatter_settings_itemform($breakpoint, $display, $breakpoints);
  }
  // Display token help field fi token is enabled.
  if (module_exists('token')) {
    $element['tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t("Tokens"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $element['tokens']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }
  return $element;
}

/**
 * Subelement to manage each breakpoint settings.
 */
function imagefield_css_field_formatter_settings_itemform($breakpoint, $display, $breakpoints) {
  foreach ($breakpoints as $bp => $mq) {
    $bp_list[$bp] = $bp;
  }
  $settings = $display['settings'];
  $element = array();
  $element[$breakpoint . '-sameas'] = array(
    '#title' => t("Same as"),
    '#type' => 'select',
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-sameas'],
    '#required' => FALSE,
    '#empty_option' => t("Custom"),
    '#options' => $bp_list,
  );
  $element[$breakpoint . '-selector'] = array(
    '#title' => t("Selector"),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 128,
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-selector'],
    '#required' => TRUE,
    '#description' => t("A valid CSS selector such as <code>.links > li > a, #logo</code>."),
  );
  $element[$breakpoint . '-image_style'] = array(
    '#title' => t("Image style"),
    '#type' => 'select',
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-image_style'],
    '#required' => FALSE,
    '#empty_option' => t("None (original image)"),
    '#options' => image_style_options(FALSE),
  );
  $element[$breakpoint . '-color'] = array(
    '#title' => t("Color"),
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 128,
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-color'],
    '#required' => FALSE,
    '#description' => t("A valid CSS color value."),
  );
  $element[$breakpoint . '-repeat'] = array(
    '#title' => t("Repeat"),
    '#type' => 'select',
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-repeat'],
    '#required' => FALSE,
    '#empty_option' => t("-No value-"),
    '#options' => array(
      'repeat' => t("Repeat horizontally and vertically"),
      'repeat-x' => t("Repeat horizontally"),
      'repeat-y' => t("Repeat vertically"),
      'no-repeat' => t("Do not repeat"),
      'inherit' => t("Inherit from parent element"),
    ),
  );
  $element[$breakpoint . '-attachment'] = array(
    '#title' => t("Attachment"),
    '#type' => 'select',
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-attachment'],
    '#required' => FALSE,
    '#empty_option' => t("-No value-"),
    '#options' => array(
      'scroll' => t("Scroll with the page"),
      'fixed' => t("Do not scroll"),
      'local' => t("Scroll with element's contents"),
    ),
  );
  $element[$breakpoint . '-horizontal_position'] = array(
    '#title' => t("Horizontal position"),
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 20,
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position'],
    '#required' => FALSE,
    '#description' => t("A valid CSS horizontal position value."),
  );
  $element[$breakpoint . '-vertical_position'] = array(
    '#title' => t("Vertical position"),
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 20,
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-vertical_position'],
    '#required' => FALSE,
    '#description' => t("A valid CSS vertical position value."),
  );
  $element[$breakpoint . '-important'] = array(
    '#title' => t("Important"),
    '#type' => 'checkbox',
    '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-important'],
    '#description' => t("Whenever this declaration is more important than others."),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function imagefield_css_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
  }
  $breakpoints['default'] = array();
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    $summary[] = '<b>' . $breakpoint . ':</b>';
    if (isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas']) && '' != $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
      $summary[] = t("Same as") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-sameas']);
    }
    if (!isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas']) || '' == $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
      $summary[] = t("CSS selector") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-selector']);

      $image_styles = image_style_options(FALSE);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings[$breakpoint]['settings'][$breakpoint . '-image_style']])) {
        $summary[] = t("Image style: @style", array('@style' => $image_styles[$settings[$breakpoint]['settings'][$breakpoint . '-image_style']]));
      }
      else {
        $summary[] = t("Original image");
      }

      if ($settings[$breakpoint]['settings'][$breakpoint . '-color']) {
        $summary[] = t("Color") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-color']);
      }
      if ($settings[$breakpoint]['settings'][$breakpoint . '-repeat']) {
        $summary[] = t("Repeat") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-repeat']);
      }
      if ($settings[$breakpoint]['settings'][$breakpoint . '-attachment']) {
        $summary[] = t("Attachment") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-attachment']);
      }
      // Display this setting only if horizontal or vertical position is set.
      if ($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position'] || $settings[$breakpoint]['settings'][$breakpoint . '-vertical_position']) {
        $summary[] = t("Position") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position'])
                . ' - ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-vertical_position']);
      }
      $summary[] = t("!important declaration") . ': ' . (($settings[$breakpoint]['settings'][$breakpoint . '-important']) ? t("Yes") : t("No"));
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * imagefield_css formatter changes the background of a region defined
 * by the selector, using the image loaded in the field.
 *
 * @see imagefield_css_formatter_info()
 */
function imagefield_css_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (isset($entity->provider)) {
    return $element;
  }
  else {
    foreach ($items as $delta => $item) {
      $item['entity'] = $entity;
      $element[$delta] = array(
        '#theme' => 'imagefield_css_formatter',
        '#item' => $item,
        '#settings' => $display['settings'],
      );
    }
    return $element;
  }
}

/**
 * Returns CSS instead of HTML for an image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - settings: field settings.
 *   - entity: Current entity needed to replace values with token module.
 *
 * @ingroup themeable
 */
function theme_imagefield_css_formatter($variables) {
  $item = $variables['item'];
  $settings = $variables['settings'];
  $entity = $item['entity'];
  $inline_css = (isset($entity->provider)) ? "<style>" : "";
  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
  }
  else {
    $breakpoints['default'] = array();
  }
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    // If a Sameas value is defined: get breakpoint name to create css - but keep mediaqueries values.
    if (isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas'])
      && '' != $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
      $breakpoint = $settings[$breakpoint]['settings'][$breakpoint . '-sameas'];
    }

    if ($settings[$breakpoint]['settings'][$breakpoint . '-image_style']) {
      $url = image_style_url($settings[$breakpoint]['settings'][$breakpoint . '-image_style'], $item['uri']);
    }
    else {
      $url = file_create_url($item['uri']);
    }
    $important = ($settings[$breakpoint]['settings'][$breakpoint . '-important']) ? ' !important' : '';

    // Replace tokens if token module is enabled.
    $selector = (module_exists('token')) ?
      token_replace($settings[$breakpoint]['settings'][$breakpoint . '-selector'], array('node' => $entity)) :
      $settings[$breakpoint]['settings'][$breakpoint . '-selector'];
    $mq_start = (isset($mediaqueries->breakpoint)) ? '
@media ' . $mediaqueries->breakpoint . '{' : '';
    $mq_end = (isset($mediaqueries->breakpoint)) ? ' }' : '';
    $inline_css .= $mq_start .
      $selector . '{background: ' . check_plain($settings[$breakpoint]['settings'][$breakpoint . '-color']) . ' url("' .
      check_plain($url) . '") ' .
      check_plain($settings[$breakpoint]['settings'][$breakpoint . '-repeat']) . ' ' .
      check_plain($settings[$breakpoint]['settings'][$breakpoint . '-attachment']) . ' ' .
      check_plain($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position']) . ' ' .
      check_plain($settings[$breakpoint]['settings'][$breakpoint . '-vertical_position']) . $important . '}' . $mq_end;
  }
  $inline_css .= (isset($entity->provider)) ? "</style>" : "";
  if (isset($entity->provider)) {
    return $inline_css;
  }
  else {
    drupal_add_css($inline_css, 'inline');
  }
}

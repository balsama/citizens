<?php
// $Id: publication_date.module,v 1.1 2009/07/20 19:49:00 cleverage Exp $
/**
 * @file
 * Add a field containing the publication date.
 *
 * @author Clever Age
 * @author Emmanuelle Gouleau
 * @author Tristan Marly
 *
 * Initial D7 Port: Joost van der Locht
 */


/**
 * Implements hook_node_load().
 */
function publication_date_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->published_at = _publication_date_get_date($node->nid);

    // we have to manage the 'old nodes', i.e nodes that have been published BEFORE the activation
    // of this module.
    if (!$node->published_at) {
      $row = db_select('node', 'n')
        ->fields('n', array('created', 'status'))
        ->condition('nid', $node->nid)
        ->execute()
        ->fetchAssoc();
      if ($row && $row['status'] == 1) {
        $node->published_at = $row['created'];
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function publication_date_node_insert($node) {
  // save publication date
  _publication_date_set_date($node);
}

/**
 * Implements hook_node_update().
 */
function publication_date_node_update($node) {
  // save publication date
  _publication_date_set_date($node);
}

/**
 * Implements hook_node_delete().
 */
function publication_date_node_delete($node) {

  // Call a db_delete anyway
  db_delete('publication_date')
    ->condition('nid', $node->nid)
    ->execute();

}

/**
 * Worker function called by hook_node_update/delete/etc
 * @param $node object
 */
function _publication_date_set_date($node) {

  // If the node->status is PUBLISHED, then used published_at,
  // If not published, then set the row to zero .
  $date = ( $node->status == 1 && !empty($node->published_at)) ? $node->published_at : 0;
  db_merge('publication_date')
    ->key(array('nid' => $node->nid))
    ->fields(array('published_at' => $date))
    ->execute();
}

/**
 * @return the publication date for the given node, or false if the node is not published
 */
function _publication_date_get_date($nid) {
  $date = db_query("SELECT published_at FROM {publication_date} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  return $date;
}

/**
 * Implements hook_views_api().
 */
function publication_date_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'publication_date') . '/includes',
  );
}

/**
 * Implementation of hook_form_BASE_ID_alter().
 * Display the publication date on the node edit form
 * @note: This wont work where you have displaysuite/rel enabled
 */
function publication_date_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form["#node"];
  $form['options']['pubdate'] = array(
    '#type' => 'textfield',
    '#title' => t('Published on'),
    '#maxlength' => 25,
    '#description' => t('Format: %time. Leave blank to use the time of form submission.', array('%time' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s O'))),
  );
  if ($form['nid'] !== NULL && isset($node->published_at) && $node->published_at) {
    $form['options']['pubdate']['#default_value'] = format_date($node->published_at, 'custom', 'Y-m-d H:i:s O');
  }
  $form['#validate'][] = 'publication_date_pubdate_validate';
  $form['#submit'][] = 'publication_date_pubdate_submit';
}

/**
 * Validate the published date input
 */
function publication_date_pubdate_validate($form, &$form_state) {
  // Validate the "authored on" field. As of PHP 5.1.0, strtotime returns FALSE instead of -1 upon failure.
  if (!empty($form_state['values']['pubdate'])) {
    if (strtotime($form_state['values']['pubdate']) <= 0) {
      form_set_error('pubdate', t('You have to specify a valid date for the published on field.'));
    }
  }
}

/**
 * Update the published date to Epoch integer for other hook implementations to deal with
 */
function publication_date_pubdate_submit($form, &$form_state) {

  // If it's a new node then let the normal function handle it, but use the REQUEST_TIME
  if(empty($form_state['node']->nid)) {
    $form_state['node']->published_at = REQUEST_TIME;
  } else {
    // Use the publication date field if it's set (custom), or REQUEST_TIME if it is not
    $form_state['node']->published_at = !empty($form_state['values']['pubdate']) ? strtotime(($form_state['values']['pubdate'])) : REQUEST_TIME;
  }


}

/**
 * Implements hook_permisson().
 */
function publication_date_permission() {
  $permissions = array();

  // Generate permissions to modify Published On date for all node types.
  foreach (node_permissions_get_configured_types() as $type) {
    $permissions += publication_date_list_permissions($type);
  }

  return $permissions;
}

/**
 * Helper function to generate permission each content type.
 *
 * @param $type
 *   The machine-readable name of the node type.
 * @return
 *   An array of permission names and description.
 */
function publication_date_list_permissions($type) {
  $name = node_type_get_name($type);
  $type = check_plain($type);

  $permissions = array(
    "set $type published on date" => array(
      'title' => t('Modify %type_name "Published On" date.', array('%type_name' => $name)),
      'description' => t('Change the "Published On" date for this content type.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_form_alter().
 */
function publication_date_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && !user_access('administer nodes')) {
    // Get a copy of the current node object.
    $node = $form['#node'];

    // Add access to the 'Options information' fieldset.
    $form['options']['status']['#access'] = (module_exists('override_node_options')) ? user_access('override ' . $node->type . ' published option') : FALSE;
    $form['options']['promote']['#access'] = (module_exists('override_node_options')) ? user_access('override ' . $node->type . ' promote to front page option') : FALSE;
    $form['options']['sticky']['#access'] = (module_exists('override_node_options')) ? user_access('override ' . $node->type . ' sticky option') : FALSE;
    $form['options']['pubdate']['#access'] = user_access('set ' . $node->type . ' published on date');
    $form['options']['#access'] = element_get_visible_children($form['options']);
  }
}

